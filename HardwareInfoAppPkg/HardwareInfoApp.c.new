#include <Uefi.h>
#include <Library/UefiLib.h>
#include <Library/PrintLib.h>
#include <Library/DebugLib.h>
#include <Library/UefiBootServicesTableLib.h>
#include <Library/UefiRuntimeServicesTableLib.h>
#include <Library/BaseMemoryLib.h>
#include <Library/MemoryAllocationLib.h>
#include <IndustryStandard/Acpi.h>
#include <Protocol/AcpiTable.h>

// 自定义 ACPI 表的签名
#define ZHWI_SIGNATURE  SIGNATURE_32('Z', 'H', 'W', 'I')  // Zhwi = 自定义硬件信息

// 自定义 ACPI 表的结构
#pragma pack(1)
typedef struct {
  EFI_ACPI_DESCRIPTION_HEADER Header;     // 标准 ACPI 表头
  UINT32                      Revision;    // 我们表格的版本
  UINT32                      FanSpeed;    // 风扇转速 (RPM)
  UINT32                      CpuTemp;     // CPU 温度 (0.1 摄氏度)
  UINT32                      SystemLoad;  // 系统负载 (百分比)
  UINT64                      Timestamp;   // 更新时间戳（秒）
} ZHWI_TABLE;
#pragma pack()

// 全局表实例
ZHWI_TABLE mZhwiTable = {
  // 标准 ACPI 头初始化
  {
    ZHWI_SIGNATURE,                  // Signature
    sizeof (ZHWI_TABLE),             // Length
    1,                               // Revision
    0,                               // Checksum - 将在安装时计算
    {'J', 'A', 'S', 'O', 'N'},       // OEMID
    114514,                          // OEM Table ID
    1,                               // OEM Revision
    19260817,                        // Creator ID
    1                                // Creator Revision
  },
  // 我们的数据字段初始化
  1,                                 // 表版本
  0,                                 // 风扇转速，将在运行时更新
  0,                                 // CPU温度，将在运行时更新
  0,                                 // 系统负载，将在运行时更新
  0                                  // 时间戳，将在运行时更新
};

/**
  计算 ACPI 表的校验和。
  表的校验和字节应让整个表的和为零。

  @param[in]      Buffer          指向 ACPI 表的指针
  @param[in]      Size            表的大小
  @param[in,out]  ChecksumOffset  校验和字段在表中的偏移
**/
VOID
AcpiCalculateChecksum (
  IN     UINT8  *Buffer,
  IN     UINTN   Size,
  IN OUT UINTN   ChecksumOffset
  )
{
  UINT8 Sum;
  UINTN Index;

  // 将校验和字段清零
  Buffer[ChecksumOffset] = 0;

  // 计算整个表的校验和
  Sum = 0;
  for (Index = 0; Index < Size; Index++) {
    Sum = (UINT8)(Sum + Buffer[Index]);
  }

  // 设置校验和字段，使总和为零
  Buffer[ChecksumOffset] = (UINT8)(0x100 - Sum);
}

/**
  生成随机模拟的风扇转速数据
  
  @param[out] FanSpeed        模拟的风扇转速 (RPM)
  @param[out] CpuTemperature  模拟的CPU温度 (0.1°C)
  @param[out] SystemLoad      模拟的系统负载 (%)
**/
VOID
GenerateSimulatedSensorData (
  OUT UINT32 *FanSpeed,
  OUT UINT32 *CpuTemperature,
  OUT UINT32 *SystemLoad
  )
{
  // 使用简单的线性同余生成器生成伪随机数
  static UINT32 Seed = 0x1234ABCD;
  
  // 更新种子
  Seed = (Seed * 1103515245 + 12345) & 0x7FFFFFFF;
  
  // 风扇转速范围：1800-3200 RPM
  *FanSpeed = 1800 + (Seed % 1400);
  
  // 更新种子以获得不同的随机值
  Seed = (Seed * 1103515245 + 12345) & 0x7FFFFFFF;
  
  // CPU温度范围：350-650 (35.0-65.0°C)
  *CpuTemperature = 350 + (Seed % 300);
  
  // 更新种子
  Seed = (Seed * 1103515245 + 12345) & 0x7FFFFFFF;
  
  // 系统负载范围：5-95%
  *SystemLoad = 5 + (Seed % 90);
  
  DEBUG ((DEBUG_INFO, "模拟传感器数据 - 风扇: %d RPM, 温度: %d.%d°C, 负载: %d%%\n", 
          *FanSpeed, *CpuTemperature / 10, *CpuTemperature % 10, *SystemLoad));
}

/**
  获取当前时间戳（秒）
**/
UINT64
GetCurrentTimestamp (
  VOID
  )
{
  EFI_STATUS Status;
  EFI_TIME Time;
  UINT64 Timestamp;
  
  Status = gRT->GetTime(&Time, NULL);
  if (EFI_ERROR(Status)) {
    DEBUG((DEBUG_ERROR, "获取时间失败: %r, 使用模拟时间戳\n", Status));
    // 如果获取时间失败，使用伪随机数
    static UINT64 SimTime = 1650000000; // 初始伪时间戳
    SimTime += 60; // 每次调用增加60秒
    return SimTime;
  }
  
  // 简单转换成秒级UNIX时间戳
  // 注意：这是非常简化的时间戳计算，不考虑闰年等
  Timestamp = (((UINT64)Time.Year - 1970) * 365 * 24 * 60 * 60) +
              ((UINT64)Time.Month * 30 * 24 * 60 * 60) +
              ((UINT64)Time.Day * 24 * 60 * 60) +
              ((UINT64)Time.Hour * 60 * 60) +
              ((UINT64)Time.Minute * 60) +
              (UINT64)Time.Second;
  
  return Timestamp;
}

/**
  更新并安装 ACPI 表。

  @param[in] SensorData  是否更新传感器数据
  
  @retval EFI_SUCCESS    表格成功安装
  @retval 其他           安装表格时发生错误
**/
EFI_STATUS
UpdateAndInstallAcpiTable (
  IN BOOLEAN SensorData
  )
{
  EFI_STATUS              Status;
  EFI_ACPI_TABLE_PROTOCOL *AcpiTable;
  UINTN                   TableKey = 0;
  
  // 查找 ACPI 表协议
  Status = gBS->LocateProtocol (
                  &gEfiAcpiTableProtocolGuid,
                  NULL,
                  (VOID **) &AcpiTable
                  );
                  
  if (EFI_ERROR (Status)) {
    DEBUG ((DEBUG_ERROR, "未找到 ACPI 表协议: %r\n", Status));
    return Status;
  }
  
  // 如果需要，更新传感器数据
  if (SensorData) {
    // 更新风扇转速和其他传感器数据
    GenerateSimulatedSensorData(
      &mZhwiTable.FanSpeed,
      &mZhwiTable.CpuTemp,
      &mZhwiTable.SystemLoad
    );
    
    // 更新时间戳
    mZhwiTable.Timestamp = GetCurrentTimestamp();
  }
  
  // 计算表的校验和
  AcpiCalculateChecksum (
    (UINT8 *) &mZhwiTable,
    mZhwiTable.Header.Length,
    OFFSET_OF (EFI_ACPI_DESCRIPTION_HEADER, Checksum)
    );
  
  // 安装 ACPI 表
  Status = AcpiTable->InstallAcpiTable (
                        AcpiTable,
                        &mZhwiTable,
                        mZhwiTable.Header.Length,
                        &TableKey
                        );
                        
  if (EFI_ERROR (Status)) {
    DEBUG ((DEBUG_ERROR, "安装 ACPI 表失败: %r\n", Status));
    return Status;
  }
  
  DEBUG ((DEBUG_INFO, "ACPI ZHWI 表已成功安装，风扇转速: %d RPM\n", mZhwiTable.FanSpeed));
  return EFI_SUCCESS;
}

/**
  定期更新 ACPI 表的回调函数
  
  @param[in]  Event     事件句柄
  @param[in]  Context   上下文
**/
VOID
EFIAPI
UpdateAcpiTableCallback (
  IN EFI_EVENT  Event,
  IN VOID      *Context
  )
{
  EFI_STATUS Status;
  
  // 更新并重新安装 ACPI 表（包含新的传感器数据）
  Status = UpdateAndInstallAcpiTable (TRUE);
  if (EFI_ERROR (Status)) {
    DEBUG ((DEBUG_ERROR, "更新 ACPI 表失败: %r\n", Status));
  } else {
    DEBUG ((DEBUG_INFO, "ACPI 表已成功更新\n"));
  }
}

/**
  此 DXE_RUNTIME_DRIVER 的入口点。

  @param[in] ImageHandle  固件为 EFI 映像分配的句柄。
  @param[in] SystemTable  指向 EFI 系统表的指针。

  @retval EFI_SUCCESS     入口点成功执行。
  @retval other           发生了一些错误。
**/
EFI_STATUS
EFIAPI
RuntimeInfoEntryPoint (
  IN EFI_HANDLE        ImageHandle,
  IN EFI_SYSTEM_TABLE  *SystemTable
  )
{
  EFI_STATUS Status;
  EFI_EVENT  UpdateEvent = NULL;

  Print (L"硬件信息 ACPI 驱动: 初始化中...\n");
  DEBUG ((DEBUG_INFO, "硬件信息 ACPI 驱动: 入口点已到达\n"));
  
  // 生成初始传感器数据
  GenerateSimulatedSensorData (
    &mZhwiTable.FanSpeed,
    &mZhwiTable.CpuTemp,
    &mZhwiTable.SystemLoad
  );
  
  // 设置初始时间戳
  mZhwiTable.Timestamp = GetCurrentTimestamp();
  
  // 安装 ACPI 表
  Status = UpdateAndInstallAcpiTable (FALSE);
  if (EFI_ERROR (Status)) {
    Print (L"安装 ACPI 表失败: %r\n", Status);
    return Status;
  }
  
  // 创建定期更新的事件
  Status = gBS->CreateEvent (
                  EVT_TIMER | EVT_NOTIFY_SIGNAL,
                  TPL_CALLBACK,
                  UpdateAcpiTableCallback,
                  NULL,
                  &UpdateEvent
                  );
                  
  if (EFI_ERROR (Status)) {
    Print (L"创建更新事件失败: %r\n", Status);
  } else {
    // 每100毫秒更新一次
    Status = gBS->SetTimer (
            UpdateEvent,
            TimerPeriodic,
            100ull  // 100ms in 100ns units
            );
                    
    if (EFI_ERROR (Status)) {
      Print (L"设置定时器失败: %r\n", Status);
      gBS->CloseEvent (UpdateEvent);
    } else {
      Print (L"已设置定期更新，每100ms更新一次传感器数据\n");
    }
  }

  Print (L"硬件信息 ACPI 表已成功安装\n");
  Print (L"当前风扇转速: %d RPM\n", mZhwiTable.FanSpeed);
  Print (L"当前CPU温度: %d.%d°C\n", mZhwiTable.CpuTemp / 10, mZhwiTable.CpuTemp % 10);

  return EFI_SUCCESS;
}